'''
Collection of RNG values (random number generator)

    This program uses the ESP32-C6 to generate random values
    by directly accessing the hardware register LPPERI_RNG_DATA_REG,
    which provides the data for the hardware random number generator.
    It also activates the ADC SAR (Successive Approximation Register)
    to maximise entropy, and uses Wi-Fi to generate more noise
    which enriches the entropy for the random number generator.
    
Author: [MicroControleurMonde]
Date: [13.12.2024]
Version: 1.0
'''

import machine
import time
import network

# Define the address of the LPPERI_RNG_DATA_REG register for accessing RNG data
LPPERI_RNG_DATA_REG = 0x600B2808

# Global variable to store the Wi-Fi object, which is used for managing the Wi-Fi connection
wifi = None

# Function to read the RNG data from the LPPERI_RNG_DATA_REG register.
# This function directly accesses the memory to fetch the random number generated by the hardware RNG.
def read_rng_data():
    # Direct memory access via machine.mem32 to read the RNG register
    return machine.mem32[LPPERI_RNG_DATA_REG]

# Function to initialize the ADC (Analog-to-Digital Converter) SAR (Successive Approximation Register)
# This step configures ADC1 to provide more noise for the entropy, enhancing randomness for RNG generation.
def init_adc_sar():   
    # Choose a valid ADC pin for the ESP32-C6. Here, GPIO 4 (ADC1_CH4) is used.
    adc_pin = machine.Pin(4)  # GPIO 4 is mapped to ADC1_CH4
    adc = machine.ADC(adc_pin)
    # Set attenuation to make the input voltage range 0 to 1V (ADC input range set to 0-2V)
    adc.atten(machine.ADC.ATTN_6DB)  # 0-2V range
    # Set resolution to 12 bits, providing a range from 0 to 4095 (higher resolution = more precise readings)
    adc.width(machine.ADC.WIDTH_12BIT)  # 12-bit resolution (range: 0-4095)
    
# Function to initialize the Wi-Fi connection. Activating Wi-Fi also enables the high-speed ADC
# on the ESP32-C6, providing a more robust entropy source for the RNG.
def init_wifi():
    global wifi  # Use the global variable to store the Wi-Fi object
    wifi = network.WLAN(network.STA_IF)
    wifi.active(True)

# Main function to control the flow of the program:
# - Initialize Wi-Fi and ADC to maximize entropy.
# - Collect a specified number of RNG values.
# - Measure performance statistics such as throughput and values per second.
def main():
    start_time = time.ticks_ms()  # Start time to measure total execution time
    total_values = 10  # The number of RNG values to collect and process
    
    # Initialize Wi-Fi and activate the high-speed ADC (SAR)
    init_wifi()  # Activates Wi-Fi and indirectly the high-speed ADC
    
    # Explicitly activate the ADC SAR (ADC1) to provide additional entropy for RNG generation
    init_adc_sar()  # Activates ADC SAR for maximizing entropy
    
    rng_values = []  # List to store the generated RNG values
    
    # Loop to collect the RNG values
    for i in range(total_values):
        rng_value = read_rng_data()  # Read one RNG value from the hardware register
        print(rng_value)  # Print the generated RNG value to the console for debugging
        rng_values.append(rng_value)  # Save the RNG value in the list
    
    # Deactivate Wi-Fi once the RNG values are collected
    wifi.active(False)
    
    # End time to calculate execution time
    end_time = time.ticks_ms()
    
    # Calculate total execution time in seconds
    total_time = time.ticks_diff(end_time, start_time) / 1000  # Convert to seconds
    # Calculate throughput in bytes per second (assuming 4 bytes per RNG value)
    throughput = (total_values * 4) / total_time  # Throughput in bytes/sec
    # Calculate RNG values per second
    values_per_sec = total_values / total_time  # RNG values generated per second
    
    # Display statistics
    print(f"### DEBUG: {total_values} RNG values have been generated.")
    print(f"### DEBUG: Total time: {total_time:.2f} seconds")
    print(f"### DEBUG: Total throughput: {throughput:.2f} bytes/sec")
    print(f"### DEBUG: Total RNG values/sec: {values_per_sec:.2f} values/sec")
    
# Run the main program to execute the RNG collection and display performance statistics
main()
